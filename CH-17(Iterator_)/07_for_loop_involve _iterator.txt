Yes, that is correct. In Python, the for loop is implemented using iterators. When you use a for loop to iterate over a container (such as a list, tuple, or set), Python internally creates an iterator object for that container using the iter() function. Then, it calls the next() method on the iterator object in each iteration of the loop to retrieve the next element of the container, until there are no more elements left.


my_list = [1, 2, 3]

for i in my_list:
    print(i)


When this code runs, 
Python internally creates an iterator object for my_list using iter(my_list). Then, it repeatedly calls next() on the iterator object to retrieve each element of the list (1, 2, and 3) and assigns it to the loop variable i. Finally, when there are no more elements left, the for loop terminates.

So, in essence, the for loop is just a shorthand way of iterating over a container using an iterator object.